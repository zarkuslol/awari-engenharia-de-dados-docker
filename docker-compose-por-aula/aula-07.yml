version: '3.7'
networks:
  awari-pipelines:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "172.18.0.0/16"
          gateway: "172.18.0.1"

# Settings and configurations that are common for all minio containers
x-minio-common: &minio-common
  image: minio/minio:RELEASE.2023-02-22T18-23-45Z
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minioadmin
    MINIO_ROOT_PASSWORD: minioadmin
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

# starts 4 docker containers running minio server instances.
# using nginx reverse proxy, load balancing, you can access
# it through port 9000.
services:
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - ../data/minio/data1-1:/data1
      - ../data/minio/data1-2:/data2
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.16

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - ../data/minio/data2-1:/data1
      - ../data/minio/data2-2:/data2
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.17

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - ../data/minio/data3-1:/data1
      - ../data/minio/data3-2:/data2
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.18

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - ../data/minio/data4-1:/data1
      - ../data/minio/data4-2:/data2
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.19

  awari-minio-nginx:
    image: nginx:1.19.2-alpine
    hostname: awari-nginx
    volumes:
      - ../data/minio/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.20

  awari-mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    ports:
      - 27017:27017
    volumes:
      - ../data/mongodb/data:/data/db
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.21
  
  # Python service
  python-app:
    build:
      context: ../
      dockerfile: ./data/python/Dockerfile
    volumes:
      - ../python-app:/home/awari/app
    ports:
      - "5001:5001"
    networks:
      - awari-pipelines

  # Kafka Services
  awari-zookeeper:
    image: zookeeper:3.8.1
    ports:
     - "2181:2181"
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.22

  awari-kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    ports:
     - "9092:9092"
    expose:
     - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://awari-kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: awari-zookeeper:2181
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.23

  awari-kafka-ui:
    image: provectuslabs/kafka-ui:v0.5.0
    container_name: awari-kafka-ui
    ports:
      - "9099:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=awari-kafka:9093
    depends_on:
      - awari-kafka
    networks:
      awari-pipelines:
        ipv4_address: 172.18.0.24